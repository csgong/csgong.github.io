[
{
	"uri": "https://csgong.github.io/csshtml/css/",
	"title": "CSS基础",
	"tags": [],
	"description": "",
	"content": "CSS 基础\n知识体系\nSetting the display property of an element only changes how the element is displayed, NOT what kind of element it is. So, an inline element with display: block; is not allowed to have other block elements inside it\nIf two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top.\n浮动元素等高问题? 给多个浮动元素设置相同高度，由于每个浮动元素内容不一样，也会出现超出高度显示情况，解决办法是使用flex布局，但是flex不支持ie10\n"
},
{
	"uri": "https://csgong.github.io/javascript/fetch/",
	"title": "fetch",
	"tags": [],
	"description": "",
	"content": "fetch是HTML5提供的新的加载资源的方法，相对于XMLHttpRequest，fetch更加强大和灵活。\n一.请求request fetch方法的语法为 fetch(input,[init]),fetch方法内部会使用这两个参数构造 Request对象，所以可以简单的将fetch语法理解为fetch(Request request)。\nfetch方法使用Request对象请求资源，Request对象的构造方法为Request(input,[init])， input可以是资源地址，也可以是Request对象，init是可选的参数对象，如果input为Request对象，则init会和input对象的属性合并。 一个简单的fetch请求如下所示：\nfetch(\u0026#39;demo.json\u0026#39;)\r.then(function(response) {\rreturn response.json();\r})\r.then(function(myJson) {\rconsole.log(myJson);\r});\r带配置的请求：\nfetch(\u0026#39;demo.json\u0026#39;,{\rmethod:\u0026#34;POST\u0026#34;,\r})\r.then(function(response) {\rreturn response.json();\r})\r.then(function(myJson) {\rconsole.log(myJson);\r});\r使用Request对象构造请求\nconst req = Request(\u0026#39;demo.json\u0026#39;,{\rmethod:\u0026#34;post\u0026#34;\r});\rfetch(req,{\rmethod:\u0026#34;POST\u0026#34;,\r})\r.then(function(response) {\rreturn response.json();\r})\r.then(function(myJson) {\rconsole.log(myJson);\r});\r1.header header是http请求的头部，可以使用init设置请求的头部信息。\nconst init = {\rheaders: {\r\u0026#39;content-type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Content-Length\u0026#39;:\u0026#39;10\u0026#39;\r}\r}\r也可以使用Headers对象来创建一个你自己的 headers 对象\nlet headers = new Headers();\rlet content = \u0026#34;Hello World\u0026#34;;\rheaders.append(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/plain\u0026#34;);\rheaders.append(\u0026#34;Content-Length\u0026#34;, content.length.toString());\rconst init = {headers};\rconsole.log(headers.has(\u0026#34;Content-Type\u0026#34;)); // true\rconsole.log(headers.has(\u0026#34;Set-Cookie\u0026#34;)); // false\r2.请求数据类型（content-type） 2.1 JSON请求 如果要发送json请求，需要将header的Content-Type设置为application/json, JSON请求的参数需要做JSON序列化处理，使用JSON.stringify方式实现\nfetch(\u0026#39;demo.json\u0026#39;,{\rmethod:\u0026#34;POST\u0026#34;,\rheaders: {\r\u0026#39;content-type\u0026#39;: \u0026#39;application/json\u0026#39;,\r},\rbody:JSON.stringify({\rparamName:\u0026#34;paramValue\u0026#34;\r})\r})\r2.2 表单请求 如果要发送表单请求，需要将header的Content-Type设置为application/x-www-form-urlencoded, 表单请求的参数需要序列化处理，可以使用URLSearchParams对象实现。\nvar searchParams = new URLSearchParams();\rsearchParams.append(\u0026#34;paramName\u0026#34;,\u0026#34;paramValue\u0026#34;);\rfetch(\u0026#39;demo.json\u0026#39;,{\rmethod:\u0026#34;POST\u0026#34;,\rheaders: {\r\u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;,\r},\rbody:searchParams\r})\rURLSearchParams对象也可以使用FormData构造\nvar formData = new FormData();\rformData.append(\u0026#34;paramName\u0026#34;,\u0026#34;paramValue\u0026#34;)\rvar searchParams = new URLSearchParams(formData);\r2.3 multipart请求 如果要发送表单请求，需要将header的Content-Type设置为multipart/form-data, multipart请求的参数可以使用FormData传递。\nvar formData = new FormData();\rvar photos = document.querySelector(\u0026#34;input[type=\u0026#39;file\u0026#39;][multiple]\u0026#34;);\rformData.append(\u0026#39;title\u0026#39;, \u0026#39;My Vegas Vacation\u0026#39;);\rformData.append(\u0026#39;photos\u0026#39;, photos.files);\rfetch(\u0026#39;demo/server\u0026#39;, {\rmethod: \u0026#39;POST\u0026#39;,\rbody: formData\r})\r3.跨域 fetch支持跨域请求，请求配置属性mode有三个值分别如下：\n  no-cors\n该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的response type为opaque,这种情况下是无法读取response body内容的。\n  cors\n该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的response type为cors\n  same-origin\n该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的response type为basic\n  4.凭据（credentials） fetch默认请求时是不包含凭据的，如果想发送包含凭据的请求（即使是跨域源），要将credentials: 设置为include， 如果只想同源下携带凭据，则要将credentials: 设置为same-origin。\n如果credentials的值为include，则服务端的响应头部Access-Control-Allow-Origin属性不能设置为*，需要设置具体的域，并且 服务端的响应头部Access-Control-Allow-Credentials属性要设置为true.\n//server\rrequire(\u0026#39;http\u0026#39;).createServer((req,res)=\u0026gt;{\rres.writeHead(200,{\r\u0026#39;Access-Control-Allow-Origin\u0026#39;:\u0026#39;http://localhost:63342\u0026#39;,\r\u0026#39;Access-Control-Allow-Credentials\u0026#39;:\u0026#39;true\u0026#39;,\r})\rres.end(\u0026#39;{\u0026#34;msg\u0026#34;:\u0026#34;hello\u0026#34;}\u0026#39;)\r}).listen(3000,\u0026#39;127.0.0.1\u0026#39;)\r//client\rfetch(req,{\rheaders: {\r\u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;\r},\rcredentials: \u0026#39;include\u0026#39;,\rmethod: \u0026#39;POST\u0026#39;,\rmode:\u0026#34;cors\u0026#34;\r})\r二.响应response Response 实例是在 fetch() 处理完promises之后返回的。\n1 常用属性 常见的Response属性有：\n status  整数(默认值为200) 为response的状态码\n statusText  字符串(默认值为\u0026quot;OK\u0026rdquo;),该值与HTTP状态码消息对应\n ok  该属性是来检查response的状态是否在200-299(包括200,299)这个范围内.该属性返回一个Boolean值\n headers  服务端响应头部信息\n2 如果判断请求是否成功 fetch请求成功与否，并不完全取决于返回的Promise的状态是否为reject，因为只有网络故障时或请求被阻止时，Promise的状态才为reject， 其他情况下全部是resolve，不管HTTP状态是否成功，例如常见的404和500错误等都会为resolve，由于这个原因，要想判断请求是否成功，除了Promise的状态外 还要通过Response的ok属性是否为true,例如：\nfunction handleResponse(response) {\rreturn response.json()\r.then((json) =\u0026gt; {\rif (!response.ok) {\rconst error = Object.assign({}, json, {\rstatus: response.status,\rstatusText: response.statusText,\r});\rreturn Promise.reject(error);\r}\rreturn json;\r});\r}\r3 body Body是fetch的响应/请求的正文，Body被Request和Response实现，方便处理请求正文和解析响应正文。\n它有如下方法可以被使用：\n arrayBuffer() 将正文解析成ArrayBuffer blob() 将正文解析成Blob formData() 将正文解析成FormData json() 将正文解析成JSON text() 将正文解析成text  4 解析响应 Response可以返回多种类型，为了正确解析，可以检查返回的头部，确定返回类型，然后调用响应方法解析响应正文。\nfetch(\u0026#34;demo.json\u0026#34;)\r.then(res =\u0026gt; {\rif(res.headers.get(\u0026#34;content-type\u0026#34;) \u0026amp;\u0026amp;\rres.headers.get(\u0026#34;content-type\u0026#34;).toLowerCase().indexOf(\u0026#34;application/json\u0026#34;) \u0026gt;= 0) {\rreturn res.json()\r} else {\rthrow new TypeError()\r}\r})\r如果你想逐步解析响应内容，可以这样做：\nfunction consume(reader) {\rvar total = 0\rreturn pump()\rfunction pump() {\rreturn reader.read().then(({done, value}) =\u0026gt; {\rif (done) {\rreturn\r}\rtotal += value.byteLength\rlog(`received ${value.byteLength}bytes (${total}bytes in total)`)\rreturn pump()\r})\r}\r}\rfetch(\u0026#34;/music/pk/altes-kamuffel.flac\u0026#34;)\r.then(res =\u0026gt; consume(res.body.getReader()))\r.then(() =\u0026gt; log(\u0026#34;consumed the entire body without keeping the whole thing in memory!\u0026#34;))\r.catch(e =\u0026gt; log(\u0026#34;something went wrong: \u0026#34; + e))\r三.终止请求 fetch方法中的signal配置用来终止请求，signal是一个AbortSignal对象，AbortSignal对象有如下属性：\n  aborted\n属性aborted标识请求是否终止，当aborted由false转变为true时，请求终止，\n  onabort\n属性可以用来监听请求终止事件。\n  AbortSignal对象可以通过AbortController对象的signal属性来创建，AbortController的属性如下：\n  signal\n属性signal是AbortSignal的实例，用于fetch请求时的signal配置\n  abort\n方法abort用于终止请求，调用后，signal属性aborted的状态转变为true。\n  一个请求终止的例子如下：\nlet controller = new AbortController();\rlet signal = controller.signal;\rsignal.onabort = (e)=\u0026gt;{\rconsole.log(\u0026#34;request aborted\u0026#34;);\r}\rlet reqTime = setTimeout(()=\u0026gt;{\rcontroller.abort(); },1000);\rfetch(\u0026#34;demo.json\u0026#34;,{signal}).then(()=\u0026gt;{\rclearTimeout(reqTime);\r});\r"
},
{
	"uri": "https://csgong.github.io/csshtml/css/flex-layout/",
	"title": "Flex 布局",
	"tags": [],
	"description": "",
	"content": "flex 布局 Flex 是 Flexible Box 的缩写，意为\u0026quot;弹性布局\u0026rdquo;，用来为盒状模型提供最大的灵活性, 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\u0026quot;容器\u0026rdquo;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\u0026quot;项目\u0026rdquo;。 flex container 包含6个属性：\n 1.flex-direction  flex-direction属性决定flex item在主轴的排列方向,可选值有row | row-reverse | column | column-reverse\n 2.flex-wrap  默认情况下，项目都排在一条线（又称\u0026quot;轴线\u0026rdquo;）上。flex-wrap属性定义，如果一条轴线排不下，如何换行 可选的值有 nowrap | wrap | wrap-reverse;\n 3.flex-flow  flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap\n 4.justify-content  属性定义了项目在主轴上的对齐方式。可选值有flex-start | flex-end | center | space-between | space-around\n 5.align-items  属性定义项目在交叉轴上如何对齐,可选的值有 flex-start | flex-end | center | baseline | stretch\n 6.align-content  属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用,可选的值有 flex-start | flex-end | center | space-between | space-around | stretch\nflex item 包含如下6个属性：\n 1.order  属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n 2.flex-grow  属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大\n 3.flex-shrink  属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小,如果为0，则项目将不缩小。\n 4.flex-basis  属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n 5.flex  属性是 flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选\n 6.align-self  属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch,值有 auto | flex-start | flex-end | center | baseline | stretch\n参考如下链接\n https://bocoup.com/blog/dive-into-flexbox https://www.w3.org/TR/css-writing-modes-3/ https://philipwalton.github.io/solved-by-flexbox/ https://css-tricks.com/international-box-sizing-awareness-day/ https://css-tricks.com/the-css-box-model/ http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html http://www.ruanyifeng.com/blog/2015/07/flex-examples.html https://davidwalsh.name/flexbox-dice https://github.com/philipwalton/solved-by-flexbox https://css-tricks.com/snippets/css/a-guide-to-flexbox/ https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties  "
},
{
	"uri": "https://csgong.github.io/csshtml/html/",
	"title": "HTML基础",
	"tags": [],
	"description": "",
	"content": "Attributes 属性放置在开始标签中，由属性名和值构成，以 \u0026ldquo;=\u0026rdquo; 分隔。 如果属性值不包含空格，\u0026rdquo; ' ` = \u0026lt; 或 \u0026gt;，则属性值可以没有引号，如果值为空的字符串，则属性可以省略\u0026quot;=\u0026quot;和值。\n\u0026lt;!--empty attributes --\u0026gt;\r\u0026lt;input name=address disabled\u0026gt;\r\u0026lt;input name=address disabled=\u0026#34;\u0026#34;\u0026gt;\r\u0026lt;!--attributes with a value --\u0026gt;\r\u0026lt;input name=address maxlength=200\u0026gt;\r\u0026lt;input name=address maxlength=\u0026#39;200\u0026#39;\u0026gt;\r\u0026lt;input name=address maxlength=\u0026#34;200\u0026#34;\u0026gt;\r所有HTML有如下全局属性：\n accesskey contenteditable dir draggable hidden is itemid itemprop itemref itemscope itemtype lang spellcheck style tabindex title translate  data- HTML纠错 编写 HTML 时如何发现错误：验证器和一致性检查器 鼓励作者使用一致性检查器（又称验证器）来发现常见的错误。 WHATWG 维护着这种工具的一个列表：validator\nsemantic "
},
{
	"uri": "https://csgong.github.io/csshtml/html/window/",
	"title": "window",
	"tags": [],
	"description": "",
	"content": "Base64 utility methods The atob() and btoa() methods allow developers to transform content to and from the base64 encoding.\n atob() base64 to text btoa() text to text base64  "
},
{
	"uri": "https://csgong.github.io/csshtml/css/pseudo-classes/",
	"title": "伪类",
	"tags": [],
	"description": "",
	"content": "a:hover MUST come after a:link and a:visited in the CSS definition in order to be effective! a:active MUST come after a:hover in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive\n参考文档 https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\n"
},
{
	"uri": "https://csgong.github.io/csshtml/html/element/",
	"title": "元素",
	"tags": [],
	"description": "",
	"content": "html html文档的根元素，可以通过document.documentElement获取到html元素。\n特有属性:\n lang 推荐html元素要指定lang属性 manifest manifest属性用于缓存  head document的元数据集合，包含 base，link，meta，noscript，script，style，template，title，其中base和title不多于一个，可以通过document.head获取到head元素。\ntitle document的标题或名称,可以通过document.title来设置title\nbase base用于指定document中所有的链接的默认browsing context。每个文档中不得包含多个 base 元素。\n属性:\n href 规定页面中所有相对链接的基准URL,这其中包括、、、标签中的URL target 在何处打开页面中所有的链接,可选的值有_blank，_self，_top，_framename  \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;This is an example for the \u0026amp;lt;base\u0026amp;gt; element\u0026lt;/title\u0026gt;\r\u0026lt;base href=\u0026#34;https://www.example.com/news/index.html\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;link1 \u0026lt;a href=\u0026#34;archives.html\u0026#34;\u0026gt;link1\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;link2 \u0026lt;a href=\u0026#34;https://www.aaa.com\u0026#34;\u0026gt;link2\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r上面例子中link1的链接地址是 \u0026ldquo;https://www.example.com/news/archives.html\u0026quot;, link2由于是绝对地址，所以它的地址没有变化，还是https://www.aaa.com，link1和link2的打开方式都是_self。 _blank, _self, _parent, or _top\nq \u0026amp; blockquote \u0026amp; cite \u0026lt;q\u0026gt;（quotation）是inline元素，适用短引用，默认会渲染成带有“”的一小段文字\n\u0026lt;blockquote\u0026gt;是block元素，适用长的引用。\u0026lt;blockquote\u0026gt;默认会想染成带有缩进的单独一段内容\n\u0026lt;cite\u0026gt; 标签通常表示它所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。 按照惯例，引用的文本将以斜体显示,例如：\n\u0026lt;blockquote cite=\u0026#34;https://www.huxley.net/bnw/four.html\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Words can be like X-rays, if you use them properly – they\u0026#39;ll go through anything. You read and you\u0026#39;re pierced.\u0026lt;/p\u0026gt;\r\u0026lt;/blockquote\u0026gt;\r\u0026lt;cite\u0026gt;Aldous Huxley, Brave New World\u0026lt;/cite\u0026gt;\r列表ol \u0026amp; ul \u0026amp; li \u0026amp; dl \u0026amp; dt \u0026amp; dd \u0026lt;ol\u0026gt;（ordered list）是有序列表，默认以数字形式排序\n\u0026lt;ul\u0026gt;(unordered list)是无序列表，默认以 **.**标注列表项\n\u0026lt;li\u0026gt;(list item) 是列表项，配合ul和ol使用。\nol的type属性用于指定配许形式，默认为1，可选的值还有A、a、I、i。\nli元素可以通过type和value属性改变当前列表项的排序方式和排序值：\n\u0026lt;ul\u0026gt;\r\u0026lt;li type=\u0026#34;1\u0026#34; value=\u0026#34;4\u0026#34;\u0026gt;Coffee\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Tea\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;ol type=\u0026#34;a\u0026#34;\u0026gt;\r\u0026lt;li type=\u0026#34;1\u0026#34; value=\u0026#34;4\u0026#34;\u0026gt;Coffee\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Tea\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\r\u0026lt;/ol\u0026gt;\r\u0026lt;dl\u0026gt; 是包含一个或多个term-descript(ion groups的列表, html5规范定义如下：Term-description groups may be names and definitions, questions and answers, categories and topics, or any other groups of term-description pairs.\n\u0026lt;dl\u0026gt;\r\u0026lt;dt\u0026gt;Blanco tequila\u0026lt;/dt\u0026gt;\r\u0026lt;dd\u0026gt;The purest form of the blue agave spirit...\u0026lt;/dd\u0026gt;\r\u0026lt;dt\u0026gt;Reposado tequila\u0026lt;/dt\u0026gt;\r\u0026lt;dd\u0026gt;Typically aged in wooden barrels for between two and eleven months...\u0026lt;/dd\u0026gt;\r\u0026lt;/dl\u0026gt;\r\u0026lt;dl\u0026gt;\r\u0026lt;dt\u0026gt;Authors:\u0026lt;/dt\u0026gt;\r\u0026lt;dd\u0026gt;Remy Sharp\u0026lt;/dd\u0026gt;\r\u0026lt;dd\u0026gt;Rich Clark\u0026lt;/dd\u0026gt;\r\u0026lt;dt\u0026gt;Editor:\u0026lt;/dt\u0026gt;\r\u0026lt;dd\u0026gt;Brandan Lennox\u0026lt;/dd\u0026gt;\r\u0026lt;dt\u0026gt;Category:\u0026lt;/dt\u0026gt;\r\u0026lt;dd\u0026gt;Comment\u0026lt;/dd\u0026gt;\r\u0026lt;/dl\u0026gt;\rCharacter Entities HTML中\u0026lt;，\u0026gt;，\u0026amp;等有特殊含义，不能直接使用,如果想显示这些字符，需要使用字符实体（Character Entities）， 字符实体由 \u0026amp;entity_name; 或者 \u0026amp;#entity_number; 组成,常见的字符实体可以查看这份文档\nem \u0026lt;em\u0026gt; 用于语气上的强调，也就是我们说话时重音所在的内容，重音放在不同地方，表达的意思可能完全不一样。\nstrong \u0026lt;strong\u0026gt;用于表示内容的重要性、严肃性(警告、通知)、紧急性\n\u0026lt;h1\u0026gt;Chapter 1: \u0026lt;strong\u0026gt;The Praxis\u0026lt;/strong\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;strong\u0026gt;Avoid the ducks.\u0026lt;/strong\u0026gt; Take any gold you find.\r\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Warning.\u0026lt;/strong\u0026gt; This dungeon is dangerous.\ri \u0026lt;i\u0026gt;用于定义与当前内容不同的部分，如术语、名言和其他特有名称\n\u0026lt;p\u0026gt;He named his car \u0026lt;i\u0026gt;The lightning\u0026lt;/i\u0026gt;, because it was very fast.\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;The Latin phrase \u0026lt;i class=\u0026#34;latin\u0026#34;\u0026gt;Veni, vidi, vici\u0026lt;/i\u0026gt; is often\rmentioned in music, art, and literature\u0026lt;/p\u0026gt;\rb \u0026lt;b\u0026gt;用于吸引注意力，不带有情绪，声音等额外的重要性\nThe following example shows a use of the b element to highlight key words without marking them up as important:\n\u0026lt;p\u0026gt;The \u0026lt;b\u0026gt;frobonitor\u0026lt;/b\u0026gt; and \u0026lt;b\u0026gt;barbinator\u0026lt;/b\u0026gt; components are fried.\u0026lt;/p\u0026gt;\rpre \u0026lt;pre\u0026gt;元素表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来\n\u0026lt;p\u0026gt;This is the \u0026lt;code\u0026gt;Panel\u0026lt;/code\u0026gt; constructor:\u0026lt;/p\u0026gt;\r\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;function Panel(element, canClose, closeHandler) {\rthis.element = element;\rthis.canClose = canClose;\rthis.closeHandler = function () { if (closeHandler) closeHandler() };\r}\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;\rcode \u0026lt;code\u0026gt;代表可以被计算机识别的任何代码的片段\n\u0026lt;p\u0026gt;The \u0026lt;code\u0026gt;code\u0026lt;/code\u0026gt; element represents a fragment of computer\rcode.\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;When you call the \u0026lt;code\u0026gt;activate()\u0026lt;/code\u0026gt; method on the\r\u0026lt;code\u0026gt;robotSnowman\u0026lt;/code\u0026gt; object, the eyes glow.\u0026lt;/p\u0026gt;\r"
},
{
	"uri": "https://csgong.github.io/csshtml/css/hacks/",
	"title": "各种css hack",
	"tags": [],
	"description": "",
	"content": "清除浮动（clearfix hack） 如果一个浮动的元素的高度超过了它所在的容器，那么浮动元素就会溢出。\n解决方案：给容器添加如下样式\n.clearfix {\roverflow: auto;\r}\roverflow方法有可能出现滚动条问题，更加好的hack方式如下：\n.clearfix::after {\rcontent: \u0026#34;\u0026#34;;\rclear: both;\rdisplay: table;\r}\r"
},
{
	"uri": "https://csgong.github.io/csshtml/css/base/",
	"title": "基础",
	"tags": [],
	"description": "",
	"content": "合并多个类 css中如果多个类有相同的样式，可以将他们合并起来，以逗号分开\nbody,h1 .title{\r}\r层叠 层叠是CSS的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法,浏览器则使用哪个属性取决于选择器的优先级 选择器的优先级顺序为（递增）：\n 类型选择器（type selectors）（例如, h1）和 伪元素（pseudo-elements）（例如, ::before） 类选择器（class selectors） (例如,.example)，属性选择器（attributes selectors）（例如, [type=\u0026quot;radio\u0026rdquo;]），伪类（pseudo-classes）（例如, :hover） ID选择器（例如, #example）  《Head First HTML与CSS 第2版》中给出的计算优先级的方法很直观，方法如下： 给定三位数 0 0 0 ，分别代表ID选择器，类选择器和类型选择器的权重，如果选择器包含ID选择器，则百位+1，如果选择器包含类或者伪类，则十位+1，如果选择器包含类型选择器，则个位+1， 多级选择器拆开后累加,例如：\nbody h1.selected {\rcolor:blue; }\r.selected {\rcolor:red; }\rbody h1.selected这个选择器计算后的总权重为 012(010 + 001+ 001),而.selected的总权重为 010,12\u0026gt;1，所以body h1.selected优于.selected。\nmargin collapsing margin collapsing是指block元素的上下外边距会合并成一个外边距。浮动元素和绝对定位元素不会合并。 通常满足如下三种情况时，就会发生合并：\n  1.毗邻(Adjacent siblings)\n两个block元素上下毗邻，中间没有被其他内容分开，就会发生margin collapsing\n  \u0026lt;!--段落1 的 margin-bottom 与段落2的margin-top合并为一个值(20)--\u0026gt;\r\u0026lt;p style=\u0026#34;margin-bottom: 20px\u0026#34;\u0026gt;段落1\u0026lt;/p\u0026gt;\r\u0026lt;p style=\u0026#34;margin-top: 20px\u0026#34;\u0026gt;段落2\u0026lt;/p\u0026gt;\r  2.父子(Parent and first/last child)\n这个稍有些复杂，解释起来有点繁琐，看下mdn的原文吧，更清晰：\n If there is no border, padding, inline part, block formatting context created, or clearance to separate the margin-top of a block from the margin-top of its first child block; or no border, padding, inline content, height, min-height, or max-height to separate the margin-bottom of a block from the margin-bottom of its last child, then those margins collapse. The collapsed margin ends up outside the parent.\n 举个例子：\n  \u0026lt;div style=\u0026#34;margin: 20px 0\u0026#34;\u0026gt;\r\u0026lt;p style=\u0026#34;margin-top: 20px\u0026#34;\u0026gt;段落1\u0026lt;/p\u0026gt;\r\u0026lt;p style=\u0026#34;margin-bottom: 20px\u0026#34;\u0026gt;段落2\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r如果父元素有边框，内边距或者inline part，都不会发生合并。\r \u0026lt;div style=\u0026#34;margin: 20px 0;border:1px solid\u0026#34;\u0026gt;\r\u0026lt;p style=\u0026#34;margin-top: 20px\u0026#34;\u0026gt;段落1\u0026lt;/p\u0026gt;\r\u0026lt;p style=\u0026#34;margin-bottom: 20px\u0026#34;\u0026gt;段落\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r 3.空元素(Empty blocks)   If there is no border, padding, inline content, height, or min-height to separate a block's margin-top from its margin-bottom, then its top and bottom margins collapse\n \u0026lt;div style=\u0026#34;margin:20px 0\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\rcss简写  padding/margin  形式为 top right bottom left,例如：\ndiv{\rpadding-top:10px;\rpadding-right:20px;\rpadding-bottom:30px;\rpadding-left:40px;\r}\r/*简写成*/\rdiv{\rpadding: 10px 20px 30px 40px;\r}\r如果四个值相同，则可以简化成一个值\ndiv{\rpadding-top:10px;\rpadding-right:10px;\rpadding-bottom:10px;\rpadding-left:10px;\r}\r/*简写成*/\rdiv{\rpadding: 10px;\r}\r如果上下相同，左右也相同，可以简写成两个值\ndiv{\rpadding-top:10px;\rpadding-right:20px;\rpadding-bottom:10px;\rpadding-left:20px;\r}\r/*简写成*/\rdiv{\rpadding: 10px 20px;\r}\r  border\nborder的简写比padding/margin要灵活，border-style,border-width和border-color这三个可以任意顺序组合\n  div{\rborder: 1px dashed red;\r}\r/*或者*/\rdiv{\rborder: red dashed 1px ;\r}\r  background\nbackground 可以简写为 background-image/background-color/background-position/background-repeat, 这四个属性的顺序可以任意组合\n  div{\rbackground: url(image url) no-repeat top left balck;\r}\r  font\nfont 的简写形式为[font-style/font-variant/font-weight] font-size/[line-height/font-family] font-size是必须指定的，font-size前面属性之间的顺序和font-size后面属性之间的顺序可以是任意的。\n  div{\rfont: italic 20px/ 1 Georgia, \u0026#34;Times New Roman\u0026#34;, Times, serif;\r}\r布局模式（Layout mode） form 布局 "
},
{
	"uri": "https://csgong.github.io/csshtml/css/properties/",
	"title": "属性",
	"tags": [],
	"description": "",
	"content": "字体 网页常用字体通常分为5类，每个类都包含很多字体，分别如下：\n  sans-serif\n字体在字符笔画末端没有任何细节，与serif字体相比，他们的外形更简单包含Verdana、Arial、Geneva、Arial Black Trebuchet MS\n  serif\n字体在字符笔画末端有叫做衬线的小细节，这些细节在大写字母中特别明显,包含Times、Times New Roman、Georgia、宋体、微软雅黑等\n  monospace\n字体，每个字母的宽度相等，通常用于计算机相关书籍中排版代码块，包含Courier、Courier New、Andale Mono等\n  cursive\n字体在浏览器中不常用，在各个浏览器中有明显的差异，包含Comic Sans、Apple Chancery Comic Sans、Apple Chancery\n  fantasy\n字体在浏览器中不常用，在各个浏览器中有明显的差异，包含Impact\n  1.使用字体 可以使用font-family指定一系列字体，通常最后一个字体是通用的字体类名称。 除了使用这些字体外，还可以使用web字体，web字体格式有.ttf、.otf、eot、.svg、.woff。 web字体可以通过css的@font-face规则使用\n@font-face {\rfont-family: Emblema One;/*指定一个字体名称，可以是你喜欢的任意名称，但通常与字体名一致*/\rsrc: url(\u0026#34;EmblemaOne-Regular.ttf\u0026#34;);/*可以是本地地址或者web服务器上的一个地址*/\r}\r/*一旦使用@font-face加载了字体，接下来就可以通过名称使用这个字体了*/\rbody {\rfont-family: Emblema One,sans-serif;\r}\r2.设置字体大小 使用font-size设置字体大小，值有如下几种：\n  px\n用像素指定字体大小，就是高速浏览器字体高度是多少像素\n  em\nem是一个相对单位，当你设置h1的字体大小是1.2em时，假设你设置了其父元素body的字体大小是14px,则h1的字体大小就是1.2*14px\n  %\n使用%指定字体大小时，是相对其父元素的，如果父元素是14px,则150%则是相对父元素的150%，也就是150% *14px\n  关键字\nfont-size有很多关键字值，包括xx-small，small，medium，large，x-large,xx-large 浏览器会把这些值转换为浏览器定义的相应默认像素值。这些关键字的大小关系通常为比前一个大小20%\n  3.设置字体粗细 使用font-weight设置字体粗细，可选值有normal，bold，inherit等\n4.设置字体风格 使用font-style设置字体风格，可选值有italic,normal,inherit等\n4.字体装饰 使用text-decoration设置字体装饰，一次可以设置多个值，可选值有line-through(中横线)，overline(上划线)，underline(下划线),none等。\nh1 {\rtext-decoration: underline overline;/*同时添加上划线和下划线*/\r}\r颜色 页面上很多地方都可以加颜色：背景色、边框颜色、字体颜色等，有如下方法可以指定颜色\n  按名称指定颜色 使用名称可以指定颜色，只需要输入响应的颜色名称即可，如“red”,“green”,“blue”\n  按百分比指定 按百分比就是使用红绿蓝各自所占的比例设置颜色，例如rgb(80%,40%,0%)。 还可以使用0-255之间的一个数指定，例如rgb(204,102,0)。\n  使用16进制编码指定 16进制编码指定就是将0-255之间的数值转换为16进制，形式为#cc6600，每两位相应代表红绿蓝的的分量\n  Media queries 媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式 你可以在@media,@import和html的link中使用，例如：\n@import url(\u0026#39;test.css\u0026#39;) screen and (min-width:400px); /*only active when max width 30em \u0026lt; width \u0026lt; 50em*/\r@media screen and (min-width: 30em) and (max-width: 50em) {}\r/*in level 4 ypu can write like this*/ @media screen and (400px \u0026lt;= width \u0026lt;= 700px) {}\rlink元素中的CSS媒体查询\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;(max-width\u0026lt;=800px)\u0026#34; href=\u0026#34;example.css\u0026#34; /\u0026gt;\rLean more from Specifications\nline-height 使用该属性指定行高，当属性值有具体单位时，元素内的所有子元素行高都是这个值，如果没有单位时，元素内的子元素的行高是给定数值的倍数， 例如：有如下html结构\n\u0026lt;div class=\u0026#34;line-height1 line-height2\u0026#34; id=\u0026#34;demoDiv\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;标题1\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;文本\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\rposition  The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.\n   static\n默认值，元素不会被特殊定位\n  relative\n在一个相对定位的元素上设置 top 、 right 、 bottom 和 left 属性会使其偏离其正常位置。其他的元素的位置则不会受该元素的影响发生位置改变来弥补它偏离后剩下的空隙。\n  fixed：\n一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置。和 relative 一样， top 、 right 、 bottom 和 left 属性都可用\n  absolute：\nabsolute 是最棘手的position值。 absolute 与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动\n  float "
},
{
	"uri": "https://csgong.github.io/csshtml/css/layout/",
	"title": "布局",
	"tags": [],
	"description": "",
	"content": "基本布局 居中布局 block元素在指定了宽度后，可以设置margin:0 auto使其水平居中 宽度可以设置width或者max-width,如果设置width后，当窗口小于给定值时，会出现水平滚动条，设置max-width可以解决这个问题。\n参考如下链接 https://segmentfault.com/a/1190000011358507 https://segmentfault.com/a/1190000008789039 https://github.com/amfe/lib-flexible http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html https://developer.mozilla.org/zh-CN/docs/Web/CSS/Layout_mode http://zh.learnlayout.com/ https://juejin.im/post/599970f4518825243a78b9d5 https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6%EF%BC%9A\n"
},
{
	"uri": "https://csgong.github.io/english/common_english_word/",
	"title": "常见的单词",
	"tags": [],
	"description": "",
	"content": "##\n"
},
{
	"uri": "https://csgong.github.io/csshtml/css/box-model/",
	"title": "盒模型",
	"tags": [],
	"description": "",
	"content": "概念  The CSS box model describes the rectangular boxes that are generated for elements in the document tree and laid out according to the visual formatting model.\n 简单理解就是盒模型描述的是元素在页面中所占据的空间，包含元素本身内容大小，内边距，边框，外边距\n关于元素的长度和高度 元素的宽度是（元素内容宽度 + 内边距+边框），当你设置宽度时，元素真实所占的宽度可能会大于你给定的值， 元素的宽度还需要通过计算才能得出，不够直接，为了解决这个问题，可以使用CSS中的box-sizing属性。 box-sizing有两个值，默认为content-box，也就是标准的盒子模型。 另一个选项是border-box,如果设置了border-box，则设置的width值= border + padding + 内容的宽度， 元素的高度同款度一样，不再赘述。\n\u0026lt;style\u0026gt;\r.simple{\rwidth: 500px;\rmargin: 20px auto;\r-webkit-box-sizing: border-box;\r-moz-box-sizing: border-box;\rbox-sizing: border-box;\r}\r.fancy {\rwidth: 500px;\rmargin: 20px auto;\rpadding: 50px;\rborder: solid blue 10px;\r-webkit-box-sizing: border-box;\r-moz-box-sizing: border-box;\rbox-sizing: border-box;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;div class=\u0026#34;simple\u0026#34;\u0026gt;应用了simple的div\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;fancy\u0026#34;\u0026gt;应用了fancy的div\u0026lt;/div\u0026gt;\r由于这种设置尺寸的方式更直观，所以甚至有人建议将所有元素元素都设置为border-box。\n* {\r-webkit-box-sizing: border-box;\r-moz-box-sizing: border-box;\rbox-sizing: border-box;\r}\rbox model的概念以及如何设置\npadding 设置内边距\nmargin 设置外边距 block元素的盒模型和inline 元素的盒模型有何区别（设置padding和margin的表现）\n参考文章 The CSS Box Model Visual_formatting_model css-tricks css-tricks\n"
},
{
	"uri": "https://csgong.github.io/csshtml/css/selectors/",
	"title": "选择器",
	"tags": [],
	"description": "",
	"content": "css 选择器 介绍css的各种选择器 https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors https://www.w3cplus.com/css3/basic-selectors http://www.ruanyifeng.com/blog/2009/03/css_selectors.html https://css4-selectors.com/selector/css4/relational-pseudo-class/ pseudo class\n"
},
{
	"uri": "https://csgong.github.io/english/english_word_from_article/",
	"title": "从文章中获取的单词",
	"tags": [],
	"description": "",
	"content": "-ish 该词来源于我对“函数是一等公民”的来源搜索中看到的，意思为有一點、一點點、（時間或數目上）\u0026hellip;多， 当人们对某件事吃不准，或不愿直说的情况下的可以用它表示。\n用法：接在形容詞、名詞、片語等後面都可以，有時甚至單獨用。\n發音：跟 \u0026ldquo;childish\u0026rdquo;, \u0026ldquo;foolish\u0026rdquo; 後面的 \u0026ldquo;ish\u0026rdquo; 發音一樣。\n例子：\nA: Hungry? （餓嗎？）\rB: Yeah, ish. （嗯，一點點。）\rA: When is the party? （party幾點開始啊？）\rB: 8-ish, I think. （我想八點多吧）\rA: How many people are going? （多少人要去？）\rB: I don\u0026#39;t know, 30ish, maybe? （不知道，大概30幾個吧）\r"
},
{
	"uri": "https://csgong.github.io/readed-articles/",
	"title": "已读文章",
	"tags": [],
	"description": "",
	"content": "JavaScript notes\n"
},
{
	"uri": "https://csgong.github.io/csshtml/",
	"title": "CSS&amp;HTML",
	"tags": [],
	"description": "",
	"content": "CSS\u0026amp;HTML notes\n"
},
{
	"uri": "https://csgong.github.io/other/awesomes/",
	"title": "Good Software",
	"tags": [],
	"description": "",
	"content": "Windows 下我的装机软件   WebStorm\n强大的集成开发环境,只是收费。\n  Chrome\n强大的浏览器，好的插件有：\n Proxy SwitchyOmega：代理扩展 Save to Pocket： 方便保存文章到pocket Adblock Plus： 广告屏蔽插件    PotPlayer\n好用的视频播放器\n  FoxMail\n邮件客户端\n  Listary\nWindows上强大的搜索软件\n  IDM\n强大的下载器，无广告，多线程下载，还可以下载视频网站上的视频\n  AIDA64\n硬件检测以及跑分工具\n  Beyond Compare 3\n文件/文件夹对比工具\n  DiskGenius\n硬盘分区工具\n  Fiddler\n抓包工具\n  Google Drive\ngoogle 云盘\n  typora\nmarkdown编辑器\n  notepad++\n文本编辑器\n  "
},
{
	"uri": "https://csgong.github.io/english/",
	"title": "IT相关的English",
	"tags": [],
	"description": "",
	"content": "IT行业中有很多术语，作为从事IT行业的我来说，这些术语的英文是必须要懂的，所以我把我学到的术语都罗列在这里了，方便查找和记忆 当然，这些单词中有很多不一定是IT中独有的，也可能是我阅读文章中，经常碰到的对理解程序概念起到至关重要的单词。\n"
},
{
	"uri": "https://csgong.github.io/javascript/",
	"title": "JavaScript",
	"tags": [],
	"description": "",
	"content": "JavaScript notes\n"
},
{
	"uri": "https://csgong.github.io/npm/",
	"title": "JavaScript",
	"tags": [],
	"description": "",
	"content": "npm notes\nnpm error Unexpected end of JSON input while parsing near 当安装发生异常终止后，再重新安装时，就有可能发生此异常，解决方法是清除npm缓存.\nnpm cache clean --force\r"
},
{
	"uri": "https://csgong.github.io/other/plans-for-2020/",
	"title": "Plan for 2020",
	"tags": [],
	"description": "",
	"content": " polymer webassembly 小程序 vue webpack nodejs CSS  Sass PostCSS CSS Naming Scheme（BEM or SUIT） CSS Linters AutoPrefixer，Modernizr   NPM Scripts Lodash Babel TypeScript ESLint Jest Mocha Enzyme Lighthouse Netlify 参考文章1 参考文章2 JHipster  "
},
{
	"uri": "https://csgong.github.io/vue/",
	"title": "Vue",
	"tags": [],
	"description": "",
	"content": "Vue notes\n"
},
{
	"uri": "https://csgong.github.io/readed-articles/css-list/",
	"title": "JavaScript相关文章",
	"tags": [],
	"description": "",
	"content": "What actually is CSS-in-JS? [] 这是为数不多的讲解为什么使用CSS-in-JS的文章，作者列举了CSS的不足以及CSS-in-JS是如何消除这些不足的 阮老师也写过一篇关于CSS-in-JS的文章，内容是CSS-in-JS的简介\nStop using CSS in JavaScript for web development[] 这篇文章一一列举了styled-components解决的所谓CSS的痛点都是不成立的。 TODO: 命名规范BEM , 腾讯BEM书写规范, styled-components使用, CSS modules\nWhy I Write CSS in JavaScript[] 这篇文章是styled-components的作者写的，文章列举了使用CSS-in-js的好处\nOh No! Our Stylesheet Only Grows and Grows and Grows! (The Append-Only Stylesheet Problem)[] 这篇文章主要说明了面对日益增大的css文件，消除无用的css是艰难的（虽然有工具），但是我们可以使用Atomic CSS和css-in-js解决这个问题 styled-components的作者写的，文章列举了使用CSS-in-js的好处\n"
},
{
	"uri": "https://csgong.github.io/readed-articles/js-list/",
	"title": "JavaScript相关文章",
	"tags": [],
	"description": "",
	"content": "Using JavaScript Generators to yield Promises [] 该文章主要讲述了在CPS编程风格中，使用callbacks有哪些不好的地方， 以及如何利用Promises和 Generators 配合作者自己写的async function解决这些问题， 相同的解决方案还有co， 在async/await出来后，这些问题都得到了解决。 TODO: CPS概念,co,作者的async是如何实现的\n"
},
{
	"uri": "https://csgong.github.io/",
	"title": "Sinclair&#39;s Blog",
	"tags": [],
	"description": "",
	"content": "Sinclair's Blog "
},
{
	"uri": "https://csgong.github.io/chrome/chrome-dev-tips/",
	"title": "Chrome Dev Tips",
	"tags": [],
	"description": "",
	"content": "copy object as string copy(someObj) on elements panel you can copy any element path:right click -\u0026gt; copy-\u0026gt;copy js path you can get document.querySelector(some element)\n#on network panel you can copy xhr response :select link then right click -\u0026gt; copy-\u0026gt;copy response\nyou can get connection information by window.navigator.connection New in Chrome 73: Code folding. Enable it via Settings \u0026gt; Preferences \u0026gt; Sources \u0026gt; Code folding "
},
{
	"uri": "https://csgong.github.io/chrome/",
	"title": "Chromes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://csgong.github.io/csshtml/html/01/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\r\r//判断浏览器是否支持 Microdata API\rfunction supports_microdata_api() {\rreturn !!document.getItems;\r}\rwindow.onload=function(){\rif(supports_microdata_api){\r//访问Microdata DOM API\rvar user = document.getItems('http://data-vocabulary.org/Person')[0];\ralert('Hi,I am ' + user.properties['name'][0].itemValue + '!');\r}\r}\r\r\r\rnanpingwanzhong\rMy Blog\r\r\r"
},
{
	"uri": "https://csgong.github.io/csshtml/test/a/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rTitle\r\r\rwindow.onpopstate = function(event) {\ralert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\r};\r\r\ra tiaozhuan\r\r"
},
{
	"uri": "https://csgong.github.io/csshtml/test/b/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rTitle\r\r\rwindow.onpopstate = function(event) {\ralert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\r};\r\r\rb tiaozhuan\r\r"
},
{
	"uri": "https://csgong.github.io/csshtml/test/demo/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rTitle\r\r\r头部\rsubmit\r\r\r"
},
{
	"uri": "https://csgong.github.io/csshtml/test/test/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\r\rCoffee Beveraqes\r--\r\r\r\r\r内容\r\r\rwindow.iFrameChanges = -1; //will get incremented to 0 on first page load\r\r\r\r"
},
{
	"uri": "https://csgong.github.io/javascript/demo/test/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\rtest fetch\r\r\r\r\r"
},
{
	"uri": "https://csgong.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://csgong.github.io/other/",
	"title": "Others",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://csgong.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]